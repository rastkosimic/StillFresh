version: '3.8'

services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - stillfresh_network

  # Kafka Broker
  kafka:
    image: bitnami/kafka:3.4.0
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_MODE=true
      - KAFKA_KRAFT_CLUSTER_ID=qk6eNRoKT6aFw3XkMJT-dw
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    networks:
      - stillfresh_network

  # PostgreSQL for user-service
  user-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: stillfresh_userdb
      POSTGRES_USER: stillfreshuser
      POSTGRES_PASSWORD: FreshStill011User
    ports:
      - "5432:5432"
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
      - ./init-user.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stillfresh_network

  # PostgreSQL for vendor-service
  vendor-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: stillfresh_vendordb
      POSTGRES_USER: stillfreshvendor
      POSTGRES_PASSWORD: FreshStill011Vendor
    ports:
      - "5433:5432"
    volumes:
      - vendor_postgres_data:/var/lib/postgresql/data
      - ./init-vendor.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stillfresh_network

  # PostgreSQL for authorization-service
  auth-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: stillfresh_authdb
      POSTGRES_USER: stillfreshauth
      POSTGRES_PASSWORD: FreshStill011Auth
    ports:
      - "5434:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
      - ./init-auth.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stillfresh_network

  # PostgreSQL for offer-service
  offer-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: stillfresh_offerdb
      POSTGRES_USER: stillfreshoffers
      POSTGRES_PASSWORD: FreshStill011Offers
    ports:
      - "5435:5432"
    volumes:
      - offer_postgres_data:/var/lib/postgresql/data
      - ./init-offer.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stillfresh_network

  # PostgreSQL for order-service
  order-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: stillfresh_orderdb
      POSTGRES_USER: stillfreshorders
      POSTGRES_PASSWORD: FreshStill011Orders
    ports:
      - "5436:5432"
    volumes:
      - order_postgres_data:/var/lib/postgresql/data
      - ./init-order.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stillfresh_network

  # PostgreSQL for payment-service
  payment-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: stillfresh_paymentdb
      POSTGRES_USER: stillfreshpayments
      POSTGRES_PASSWORD: FreshStill011Payments
    ports:
      - "5437:5432"
    volumes:
      - payment_postgres_data:/var/lib/postgresql/data
      - ./init-payment.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stillfresh_network

  # PostgreSQL for notification-service
  notification-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: stillfresh_notificationdb
      POSTGRES_USER: stillfreshnotification
      POSTGRES_PASSWORD: FreshStill011Notification
    ports:
      - "5438:5432"
    volumes:
      - notification_postgres_data:/var/lib/postgresql/data
      - ./init-notification.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stillfresh_network

  # Redis for caching and token blacklisting
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

  # Eureka service discovery
  eureka-server:
    build: ./eureka-server
    ports:
      - "8761:8761"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      - user-postgres
      - vendor-postgres
      - auth-postgres
    networks:
      - stillfresh_network

  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
      - authorization-service
      - user-service
      - vendor-service
      - offer-service
      - order-service
      - payment-service
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

  # User Service
  user-service:
    build: ./user-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - user-postgres
      - redis
      - kafka
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

  # Vendor Service
  vendor-service:
    build: ./vendor-service
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - vendor-postgres
      - redis
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

  # Authorization Service
  authorization-service:
    build: ./authorization-service
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - auth-postgres
      - redis
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

  # Offer Service
  offer-service:
    build: ./offer-service
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - offer-postgres
      - redis
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

  # Order Service
  order-service:
    build: ./order-service
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
      - order-postgres
      - redis
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

  # Payment Service
  payment-service:
    build: ./payment-service
    ports:
      - "8086:8086"
    depends_on:
      - eureka-server
      - payment-postgres
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

  # Notification Service
  notification-service:
    build: ./notification-service
    ports:
      - "8087:8087"
    depends_on:
      - eureka-server
      - notification-postgres
      - redis
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
      - FIREBASE_CREDENTIALS_PATH=/app/firebase/firebase-service-account.json
    volumes:
      - C:/Users/admin/Documents/JosSveze/stillfresh-2412f-firebase-adminsdk.json:/app/firebase/firebase-service-account.json
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - stillfresh_network

volumes:
  user_postgres_data:
  vendor_postgres_data:
  auth_postgres_data:
  offer_postgres_data:
  order_postgres_data:
  payment_postgres_data:
  notification_postgres_data:

networks:
  stillfresh_network:
    driver: bridge
